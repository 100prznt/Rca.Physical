using Rca.Physical.Dimensions;
using Rca.Physical.Dimensions.Arithmetric;
using Rca.Physical.Units;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Rca.Physical.Io
{
    public class Controller
    {
        Calculator m_Calculator;

        public List<PhysicalDimensions> Dimensions { get; set; }

        public List<PhysicalUnits> Units { get; set; }

        internal List<FunctionDescription> Functions { get; set; }

        public Controller()
        {
            Dimensions = new List<PhysicalDimensions>((PhysicalDimensions[])Enum.GetValues(typeof(PhysicalDimensions)));
            Units = new List<PhysicalUnits>((PhysicalUnits[])Enum.GetValues(typeof(PhysicalUnits)));

            Functions = new List<FunctionDescription>();
            //Use all functions from calculator buffer
            m_Calculator = new Calculator(); //Init buffer

            foreach (var func in Calculator.DimensionsFunctionsBuffer)
                Functions.AddRange(func.Value);

            Functions = Functions.OrderBy(x => x.DimensionResult.ToString()).ToList();

        }

        public void ExportUnitsAsCsv(string path)
        {
            using (var sw = new StreamWriter(path))
            {
                sw.WriteLine(UnitInfo.CsvHeader);
                foreach (var unit in Units)
                    sw.WriteLine(new UnitInfo(unit).ToCsvLine());
            }
        }

        public void ExportDerivativeFunctions(string path)
        {
            using (var sw = new StreamWriter(path))
            {
                sw.WriteLine(DerivativeFunctionInfo.CsvHeader);
                foreach (var function in Functions)
                    sw.WriteLine(new DerivativeFunctionInfo(function).ToCsvLine());
            }
        }

#if DEBUG

        public void ExportDerivativeFunctionArray(string path)
        {
            if (Directory.Exists(path[..path.LastIndexOf('\\')]))
            {
                using (var sw = new StreamWriter(path))
                {
                    sw.WriteLine("using Rca.Physical.Dimensions.Arithmetric;");
                    sw.WriteLine();
                    sw.WriteLine("namespace Rca.Physical.Tests");
                    sw.WriteLine("{");
                    sw.WriteLine("\t/// <summary>");
                    sw.WriteLine("\t/// THIS CLASS IS AUTO GENERATED!");
                    sw.WriteLine("\t/// ALL CHANGES ARE OVERWRITTEN BY EXECUTION OF THE Rca.Physics.Io PROJECT");
                    sw.WriteLine("\t/// </summary>");
                    sw.WriteLine("\tpublic class AutoGenerated");
                    sw.WriteLine("\t{");
                    sw.WriteLine("\t\tinternal static FunctionDescription[] DerivativeFunctions = new FunctionDescription[]");
                    sw.WriteLine("\t\t{");
                    foreach (var function in Functions)
                        sw.WriteLine("\t\t\t" + function.ToCSharp() + ",");
                    sw.WriteLine("\t\t};");
                    sw.WriteLine("\t}");
                    sw.WriteLine("}");
                }
            }
        }

#endif
    }
}
